{"version":3,"sources":["../../app-es6/services/ConnectionFactory.js"],"names":["stores","version","dbname","connection","close","ConnectionFactory","Error","Promise","resolve","reject","openRequest","window","indexedDB","open","onupgradeneeded","_createStores","e","target","result","onsuccess","bind","onerror","console","log","error","name","forEach","objectStoreNames","contains","store","deleteObjectStore","createObjectStore","autoIncrement"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAMA,kB,GAAS,CAAC,aAAD,C;AACTC,mB,GAAU,C;AACVC,kB,GAAS,Y;AAEXC,sB,GAAa,I;AAEbC,iB,GAAQ,I;;yCAECC,iB;AACT,6CAAa;AAAA;;AACT,0BAAM,IAAIC,KAAJ,CAAU,6CAAV,CAAN;AACH;;;;oDAEqB;AAClB,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAoB;AACnC,gCAAIC,cAAcC,OAAOC,SAAP,CAAiBC,IAAjB,CAAsBX,MAAtB,EAA6BD,OAA7B,CAAlB;;AAEAS,wCAAYI,eAAZ,GAA8B,aAAK;AAC/BT,kDAAkBU,aAAlB,CAAgCC,EAAEC,MAAF,CAASC,MAAzC;AACH,6BAFD;;AAIAR,wCAAYS,SAAZ,GAAwB,aAAK;;AAEzB,oCAAG,CAAChB,UAAJ,EAAe;AACXA,iDAAaa,EAAEC,MAAF,CAASC,MAAtB;AACAd,4CAAQD,WAAWC,KAAX,CAAiBgB,IAAjB,CAAsBjB,UAAtB,CAAR;AACAA,+CAAWC,KAAX,GAAmB,YAAU;AACzB,8CAAM,IAAIE,KAAJ,CAAU,4CAAV,CAAN;AACH,qCAFD;AAGH;AACDE,wCAAQQ,EAAEC,MAAF,CAASC,MAAjB;AACH,6BAVD;;AAYAR,wCAAYW,OAAZ,GAAsB,aAAK;AACvBC,wCAAQC,GAAR,CAAYP,EAAEC,MAAF,CAASO,KAArB;AACAf,uCAAOO,EAAEC,MAAF,CAASO,KAAT,CAAeC,IAAtB;AACH,6BAHD;AAKH,yBAxBM,CAAP;AAyBH;;;sDACuB;AACpB,4BAAGtB,UAAH,EAAc;AACVC;AACAD,yCAAa,IAAb;AACH;AACJ;;;kDAEoBA,U,EAAW;AAC5BH,+BAAO0B,OAAP,CAAe,iBAAS;AACpB,gCAAGvB,WAAWwB,gBAAX,CAA4BC,QAA5B,CAAqCC,KAArC,CAAH,EAA+C;AAC3C1B,2CAAW2B,iBAAX,CAA6BD,KAA7B;AACH;AACJ,yBAJD;;AAMA1B,mCAAW4B,iBAAX,CAA6BF,KAA7B,EAAmC,EAAEG,eAAe,IAAjB,EAAnC;AACH","file":"ConnectionFactory.js","sourcesContent":["const stores = ['negociacoes'];\nconst version = 2;\nconst dbname = 'aluraframe';\n\nlet connection = null;\n\nlet close = null;\n\nexport class ConnectionFactory {\n    constructor(){\n        throw new Error('Não é possível instânciar ConnectionFactory');\n    }\n\n    static getConnection(){\n        return new Promise((resolve,reject) => {\n            let openRequest = window.indexedDB.open(dbname,version);\n\n            openRequest.onupgradeneeded = e => {\n                ConnectionFactory._createStores(e.target.result)\n            }\n\n            openRequest.onsuccess = e => {\n\n                if(!connection){\n                    connection = e.target.result;\n                    close = connection.close.bind(connection);\n                    connection.close = function(){\n                        throw new Error('Você não pode fechar diretamente a conexão');\n                    }\n                }\n                resolve(e.target.result);\n            };\n\n            openRequest.onerror = e => {\n                console.log(e.target.error);\n                reject(e.target.error.name);\n            };\n            \n        });\n    }\n    static closeConnection(){\n        if(connection){\n            close();\n            connection = null;\n        }\n    }\n\n    static _createStores(connection){\n        stores.forEach(store => {\n            if(connection.objectStoreNames.contains(store)){\n                connection.deleteObjectStore(store);\n            }\n        });\n\n        connection.createObjectStore(store,{ autoIncrement: true });\n    }\n}\n"]}