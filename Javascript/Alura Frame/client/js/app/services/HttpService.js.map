{"version":3,"sources":["../../app-es6/services/HttpService.js"],"names":["Negociacao","HttpService","res","ok","Error","contentText","url","Promise","resolve","reject","xhr","XMLHttpRequest","open","onreadystatechange","readyState","status","JSON","parse","responseText","map","Date","objeto","data","quantidade","valor","send","dado","fetch","headers","method","body","stringify","then","_handleErrors"],"mappings":";;;;;;;;;;;;;;;AAAQA,sB,qBAAAA,U;;;;;;;;;;;;;;;;;;;;;mCACKC,W;;;;;;;kDAEKC,G,EAAI;AACd,4BAAGA,IAAIC,EAAP,EAAU;AACN,mCAAOD,GAAP;AACH;AACD,8BAAM,IAAIE,KAAJ,CAAUF,IAAIG,WAAd,CAAN;AACH;;;wCAEGC,G,EAAI;AACJ;AACA;AACA;;AAEA,+BAAO,IAAIC,OAAJ,CAAY,UAACC,OAAD,EAASC,MAAT,EAAkB;AACjC,gCAAIC,MAAO,IAAIC,cAAJ,EAAX;AACAD,gCAAIE,IAAJ,CAAS,KAAT,EAAeN,GAAf;AACAI,gCAAIG,kBAAJ,GAAyB,YAAM;;AAE3B,oCAAGH,IAAII,UAAJ,IAAkB,CAArB,EAAuB;AACnB,wCAAGJ,IAAIK,MAAJ,IAAc,GAAjB,EAAqB;AACjBP,gDAAQQ,KAAKC,KAAL,CAAWP,IAAIQ,YAAf,EACPC,GADO,CACH;AAAA,mDACD,IAAInB,UAAJ,CAAe,IAAIoB,IAAJ,CAASC,OAAOC,IAAhB,CAAf,EAAsCD,OAAOE,UAA7C,EAAyDF,OAAOG,KAAhE,CADC;AAAA,yCADG,CAAR;AAIH,qCALD,MAKO;AACH,4CAAIpB,KAAJ,CAAU,qCAAV;AACAK,+CAAOC,IAAIQ,YAAX;AACH;AACJ;AACJ,6BAbD;AAcAR,gCAAIe,IAAJ;AACH,yBAlBM,CAAP;AAmBH;;;yCACInB,G,EAAIoB,I,EAAK;AAAA;;AACV,+BAAOC,MAAMrB,GAAN,EAAU;AACbsB,qCAAS,EAAE,gBAAiB,kBAAnB,EADI;AAEbC,oCAAQ,MAFK;AAGbC,kCAAMd,KAAKe,SAAL,CAAeL,IAAf;AAHO,yBAAV,EAKNM,IALM,CAKA;AAAA,mCAAO,MAAKC,aAAL,CAAmB/B,GAAnB,CAAP;AAAA,yBALA,CAAP;AAMA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACH","file":"HttpService.js","sourcesContent":["import {Negociacao} from '../models/Negociacao';\nexport class HttpService {\n\n    _handleErrors(res){\n        if(res.ok){ \n            return res\n        }\n        throw new Error(res.contentText)\n    }\n\n    get(url){    \n        // return fetch(url)\n        //     .then(res => this._handleErrors(res))\n        //     .then(res => res.json())\n            \n        return new Promise((resolve,reject)=>{\n            let xhr =  new XMLHttpRequest();\n            xhr.open('GET',url);\n            xhr.onreadystatechange = () => {\n\n                if(xhr.readyState == 4){\n                    if(xhr.status == 200){\n                        resolve(JSON.parse(xhr.responseText)\n                        .map(objeto => \n                            new Negociacao(new Date(objeto.data), objeto.quantidade, objeto.valor)));\n                        \n                    } else {\n                        new Error('Não foi possível fazer a requisição')\n                        reject(xhr.responseText)\n                    }\n                }\n            }\n            xhr.send()\n        })\n    }\n    post(url,dado){\n        return fetch(url,{\n            headers: { \"Content-Type\" : \"application/json\"},\n            method: 'post',\n            body: JSON.stringify(dado)\n        })\n        .then( res => this._handleErrors(res))\n        // return new Promise((resolve, reject) => {\n\n        //     let xhr = new XMLHttpRequest();\n        //     xhr.open(\"POST\", url, true);\n        //     xhr.setRequestHeader(\"Content-Type\", \"application/json\");\n        //     xhr.onreadystatechange = () => {\n        //         if(xhr.readyState == 4){\n        //             if(xhr.status == 200){\n        //                 resolve('Negociação cadastrada com sucesso!')\n        //             }else {\n        //                 new Error('Não foi possível cadastrar a negociação a requisição')\n        //                 reject(xhr.responseText)\n        //             }\n        //         }\n        //     }\n        //     xhr.send(JSON.stringify(dado));\n        // });\n    }\n}\n"]}